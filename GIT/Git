Git è un software, un sistema di versionamento, che ci permette di tracciare ogni step di progetto e di avere diverse versioni dello stesso.

Ci permette di tracciare ogni modifica apportata al progetto e di poter condividere il nostro codice.
Sia sul nostro computer che su piattaforme esterne, attraverso le quali possiamo condividere il nostro progetto con altre persone e quindi anche lavorarci in team in parallelo.

Ci permette di controllare le modifiche, di poter tornare a una situazione precedente in cui il funzionamento del progetto era ancora presente, di riguardare precedenti stringhe di codice in seguito rimosse.

Git fa parte di un sistema più vasto di software chiamati "Distributed version control software"(DVCS) che permettono di tracciare le modifiche, annullare le modifiche e tornare ad uno stato precedente, permettono la collaborazione tra più persone sul codice e di vedere chi ha fatto quali modifiche.


Storia

Git nasce nel 2005 ed è stato sviluppato da Linus Torvalds per aiutare lo sviluppo di Kernel Linux.

Git fin da subito ha avuto alcune caratteristiche che gli altri DVCS non avevano:
- Velocità
- Design semplice
- Massimo supporto allo sviluppo non lineare (migliaia di branch paralleli possibili)
- Massima compatibilità e quindi diffusione
- Capacità di sostenere in modo efficiente grandi progetti come il Kernel Linux (15+ million LOC)

Così è diventato lo standard dei DVCS, che adesso viene utilizzato da qualsiasi azienda.


Procedimento:

Git - Init (Inizializzazione del progetto)
- Operazione da fare solo all'inizio di ogni progetto
- Da questo momento ogni modifica sarà tracciata e la tua cartella di progetto diventa un "repository"(Repository(o repo) è l'insieme di tutti i file del progetto e la loro storia)

Git - Staging (Inserimento dei file nell'area di staging)
- Git controlla i file del repo e segnala quali sono quelli che sono stati modificati, rispetto all'ultimo stato.
- È nostro compito selezionare quelli che logicamente fanno parte della stessa modifica inserendoli nell'area di staging (Staging: è l'area di sosta temporanea comune per tutti i file che concorrono per tutti i file che concorrono alla stessa modifica)

Git - Commit (Creazione di un commit)
- Quando tutti i file necessari a fare una modifica sono stati modificati e inseriti nell'area di staging, si può creare un commit (Commit: è l'atto di creare uno stato recuperabile del progetto)
- Git prende tutte le informazioni dei file nell'area di staging e crea uno "stato di progetto" sulla linea temporale.
- Questo potrà essere utilizzato anche come punto di recupero. È un commit e sarà possibile tornare allo stato del progetto al momento del commit in qualsiasi momento.
- L'ultimo commit viene chiamato "Head".

Git - Revert (Ritorno ad un commit precedente)
- Per tornare ad un commit precedente è possibile eseguire una operazione di revert, indicando l'hash (codice univoco identificativo del commit) del commit che si vuole revertare, tornando di fatto alla situazione precedente.
- Questa azione non cancella commit, ma fa una copia dello stato precedente del progetto in un nuovo commit, aggiungendolo alla linea temporale.

Git - Reset (Ritorno ad un commit precedente)
- È possibile anche eseguire una operazione di reset, indicando l'hash del commit a cui si vuole ritornare.
Esistono due tipi di reset:
  - Hard reset, tutte le modifiche successive al commit vengono eliminate
  - Reset, tutte le modifiche successive al commit vengono messe in staging
- In linea generale alterare la linea temporale può portare diversi problemi, è quindi preferibile evitarlo quando possibile.

Git - Remote (Salvare la repo su cloud)
- È possibile inviare la copia del nostro repo ad un server esterno, per diversi motivi, tra cui:
  - per sicurezza (se il codice fosse solo sul nostro PC e questo si rompesse?)
  - per facilitare la condivisione del codice con altre persone

Git - Push (Sincronizzazione repo - da local a remote)
- Per far si che il nostro remote abbia una vera utilità dobbiamo caricarci tutte le informazioni del nostro repo locale man mano che ci lavoriamo.
- Il push fa proprio questo, quindi caricherà tutto lo stato del nostro repo locale. Sia i file con le modifiche, sia eventuali file nuovi, sia tutte le informazioni di tracciamento di Git.
- È importante farlo di frequente e non solo a fine giornata.